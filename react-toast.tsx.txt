import React, { useState, useEffect } from 'react';
import { X, CheckCircle, AlertCircle, Info, AlertTriangle } from 'lucide-react';

const Toast = ({ message, type = 'info', duration = 4000, onClose }) => {
  const [isVisible, setIsVisible] = useState(true);
  const [isExiting, setIsExiting] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsExiting(true);
      setTimeout(() => {
        setIsVisible(false);
        onClose();
      }, 300);
    }, duration);

    return () => clearTimeout(timer);
  }, [duration, onClose]);

  const handleClose = () => {
    setIsExiting(true);
    setTimeout(() => {
      setIsVisible(false);
      onClose();
    }, 300);
  };

  const getToastStyles = () => {
    const baseStyles = "flex items-center p-4 rounded-lg shadow-lg border-l-4 backdrop-blur-sm transition-all duration-300 transform";
    const exitStyles = isExiting ? "translate-x-full opacity-0" : "translate-x-0 opacity-100";
    
    switch (type) {
      case 'success':
        return `${baseStyles} bg-green-50 border-green-500 text-green-800 ${exitStyles}`;
      case 'error':
        return `${baseStyles} bg-red-50 border-red-500 text-red-800 ${exitStyles}`;
      case 'warning':
        return `${baseStyles} bg-yellow-50 border-yellow-500 text-yellow-800 ${exitStyles}`;
      default:
        return `${baseStyles} bg-blue-50 border-blue-500 text-blue-800 ${exitStyles}`;
    }
  };

  const getIcon = () => {
    const iconProps = { size: 20, className: "mr-3 flex-shrink-0" };
    
    switch (type) {
      case 'success':
        return <CheckCircle {...iconProps} className="mr-3 flex-shrink-0 text-green-600" />;
      case 'error':
        return <AlertCircle {...iconProps} className="mr-3 flex-shrink-0 text-red-600" />;
      case 'warning':
        return <AlertTriangle {...iconProps} className="mr-3 flex-shrink-0 text-yellow-600" />;
      default:
        return <Info {...iconProps} className="mr-3 flex-shrink-0 text-blue-600" />;
    }
  };

  if (!isVisible) return null;

  return (
    <div className={getToastStyles()}>
      {getIcon()}
      <div className="flex-1 font-medium">{message}</div>
      <button
        onClick={handleClose}
        className="ml-4 text-gray-400 hover:text-gray-600 transition-colors duration-200"
      >
        <X size={18} />
      </button>
    </div>
  );
};

const ToastContainer = ({ toasts, removeToast }) => {
  return (
    <div className="fixed top-4 right-4 z-50 space-y-2 max-w-sm">
      {toasts.map((toast) => (
        <Toast
          key={toast.id}
          message={toast.message}
          type={toast.type}
          duration={toast.duration}
          onClose={() => removeToast(toast.id)}
        />
      ))}
    </div>
  );
};

const useToast = () => {
  const [toasts, setToasts] = useState([]);

  const addToast = (message, type = 'info', duration = 4000) => {
    const id = Date.now() + Math.random();
    setToasts(prev => [...prev, { id, message, type, duration }]);
  };

  const removeToast = (id) => {
    setToasts(prev => prev.filter(toast => toast.id !== id));
  };

  return { toasts, addToast, removeToast };
};

export default function ToastDemo() {
  const { toasts, addToast, removeToast } = useToast();

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-8">
      <div className="max-w-2xl mx-auto">
        <h1 className="text-4xl font-bold text-gray-800 mb-8 text-center">
          Toast Notifications
        </h1>
        
        <div className="bg-white rounded-xl shadow-lg p-8 mb-8">
          <h2 className="text-2xl font-semibold text-gray-700 mb-6">Try Different Toast Types</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button
              onClick={() => addToast("Success! Your action was completed.", "success")}
              className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200 font-medium"
            >
              Success Toast
            </button>
            
            <button
              onClick={() => addToast("Error! Something went wrong.", "error")}
              className="px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200 font-medium"
            >
              Error Toast
            </button>
            
            <button
              onClick={() => addToast("Warning! Please check your input.", "warning")}
              className="px-6 py-3 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors duration-200 font-medium"
            >
              Warning Toast
            </button>
            
            <button
              onClick={() => addToast("Info: Here's some helpful information.", "info")}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium"
            >
              Info Toast
            </button>
          </div>
          
          <div className="mt-6 pt-6 border-t border-gray-200">
            <button
              onClick={() => addToast("This toast will disappear in 8 seconds!", "info", 8000)}
              className="px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors duration-200 font-medium"
            >
              Long Duration Toast (8s)
            </button>
          </div>
        </div>
        
        <div className="bg-white rounded-xl shadow-lg p-8">
          <h2 className="text-2xl font-semibold text-gray-700 mb-4">Features</h2>
          <ul className="space-y-2 text-gray-600">
            <li className="flex items-center">
              <CheckCircle size={16} className="text-green-600 mr-2" />
              Auto-dismiss after configurable duration
            </li>
            <li className="flex items-center">
              <CheckCircle size={16} className="text-green-600 mr-2" />
              Manual close button
            </li>
            <li className="flex items-center">
              <CheckCircle size={16} className="text-green-600 mr-2" />
              Smooth slide-in and slide-out animations
            </li>
            <li className="flex items-center">
              <CheckCircle size={16} className="text-green-600 mr-2" />
              Multiple toast types (success, error, warning, info)
            </li>
            <li className="flex items-center">
              <CheckCircle size={16} className="text-green-600 mr-2" />
              Stacking support for multiple toasts
            </li>
            <li className="flex items-center">
              <CheckCircle size={16} className="text-green-600 mr-2" />
              Responsive design
            </li>
          </ul>
        </div>
      </div>
      
      <ToastContainer toasts={toasts} removeToast={removeToast} />
    </div>
  );
}